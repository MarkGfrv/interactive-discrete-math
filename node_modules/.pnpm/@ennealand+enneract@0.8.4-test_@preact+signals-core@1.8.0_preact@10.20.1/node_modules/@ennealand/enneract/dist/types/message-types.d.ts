import { TemplateItem, Tuple } from './common-types.ts';
export declare const SupportedContetTypes: readonly ["int", "float", "string", "binary"];
export type ContentType = (typeof SupportedContetTypes)[number];
export type KeynodesRequest = {
    type: 'keynodes';
    payload: ({
        command: 'find';
        idtf: string;
    } | {
        command: 'resolve';
        idtf: string;
        elType: number;
    })[];
};
export type KeynodesResponse = {
    payload: number[];
};
export type EventType = 'add_outgoing_edge' | 'add_ingoing_edge' | 'remove_outgoing_edge' | 'remove_ingoing_edge' | 'delete_element' | 'content_change';
export type EventRequest = {
    type: 'events';
    payload: {
        create?: {
            type: EventType;
            addr: number;
        }[];
        delete?: number[];
    };
};
export type HealthcheckRequest = {
    type: 'healthcheck';
    payload: null;
};
export type HealthcheckResponse = {
    payload: number;
};
export type EventResponse = {
    payload: number[];
};
export type EventMessage = {
    event: 1;
    id: number;
    payload: [number, number, number];
};
export type TypeRequest = {
    type: 'check_elements';
    payload: number[];
};
export type TypeResponse = {
    payload: number[];
};
export type SearchRequest = {
    type: 'search_template';
    payload: {
        templ: Tuple<TemplateItem, 3>[];
    };
};
export type SearchResponse = {
    payload: {
        addrs: number[][];
        aliases: Record<string, number>;
    };
};
export type CreateRequest = {
    type: 'create_elements';
    payload: ({
        el: 'node';
        type: number;
    } | {
        el: 'edge';
        type: number;
        src: {
            type: 'addr';
            value: number;
        };
        trg: {
            type: 'addr';
            value: number;
        };
    })[];
};
export type CreateResponse = {
    payload: number[];
};
export type GenereateRequest = {
    type: 'generate_template';
    payload: {
        templ: Tuple<TemplateItem, 3>[];
    };
};
export type GenereateResponse = {
    payload: {
        addrs: number[];
        aliases: Record<string, number>;
    };
};
export type ContentGetRequest = {
    type: 'content:get';
    payload: {
        command: 'get';
        addr: number;
    }[];
};
export type ContentSetRequest = {
    type: 'content:set';
    payload: {
        command: 'set';
        type: ContentType;
        data: string | number;
        addr: number;
    }[];
};
export type ContentSubstringRequest = {
    type: 'content:substring';
    payload: {
        command: 'find_strings_by_substr';
        data: string;
    }[];
};
export type ContentFindRequest = {
    type: 'content:find';
    payload: {
        command: 'find';
        data: string;
    }[];
};
export type ContentGetResponse = {
    payload: {
        type: ContentType;
        value: string | number;
    }[];
};
export type ContentSetResponse = {
    payload: 1[];
};
export type ContentSubstringResponse = {
    payload: string[][];
};
export type ContentFindResponse = {
    payload: number[][];
};
export type DeleteRequest = {
    type: 'delete_elements';
    payload: number[];
};
export type DeleteResponse = {
    payload: boolean[];
};
type Compose<T> = T extends [infer F, ...infer R] ? F extends [Record<string, unknown> & {
    type: string;
}, Record<string, unknown>] ? Record<F[0]['type'], {
    request: F[0];
    response: F[1];
}> & Compose<R> : unknown : unknown;
export type General = Compose<[
    [
        KeynodesRequest,
        KeynodesResponse
    ],
    [
        EventRequest,
        EventResponse
    ],
    [
        TypeRequest,
        TypeResponse
    ],
    [
        SearchRequest,
        SearchResponse
    ],
    [
        CreateRequest,
        CreateResponse
    ],
    [
        GenereateRequest,
        GenereateResponse
    ],
    [
        ContentGetRequest,
        ContentGetResponse
    ],
    [
        ContentSetRequest,
        ContentSetResponse
    ],
    [
        ContentSubstringRequest,
        ContentSubstringResponse
    ],
    [
        ContentFindRequest,
        ContentFindResponse
    ],
    [
        DeleteRequest,
        DeleteResponse
    ],
    [
        HealthcheckRequest,
        HealthcheckResponse
    ]
]>;
export {};
