import * as MessageTypes from './types/message-types.ts';
export type Options = {
    silent?: true;
    reconnect?: true;
};
export declare class ConnectionError extends ReferenceError {
    constructor();
}
export declare class EnneractEngine {
    private readonly url;
    private readonly options?;
    private ws;
    private resolveHealthcheck;
    private readonly queue;
    private readonly eventsQueue;
    private messageCounter;
    private connected;
    private closed;
    private keynodes;
    private hangingOperations;
    constructor(url: string, options?: Options);
    private connect;
    healthCheckInterval: number | undefined;
    private onConnect;
    private onDisconnect;
    private onMessage;
    subscribe(events: MessageTypes.EventRequest['payload']['create'], callback: (index: number, response: MessageTypes.EventMessage['payload']) => void): Promise<number[]>;
    unsubscribe(ids: number[]): Promise<number[]>;
    send<T extends keyof MessageTypes.General>(type: T, payload: MessageTypes.General[T]['request']['payload']): Promise<MessageTypes.General[T]['response']['payload']>;
    getKeynode(idtf: string): Promise<number>;
    disconnect(): Promise<void>;
}
export { MessageTypes };
