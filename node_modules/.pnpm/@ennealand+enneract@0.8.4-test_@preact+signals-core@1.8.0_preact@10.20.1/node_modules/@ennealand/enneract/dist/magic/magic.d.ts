import { EnneractEngine, MessageTypes } from '../engine.ts';
import { GetQuery, TemplateItem, TemplatePromiseItem } from '../types/common-types.ts';
import { MagicHat } from '../utils/magic-hat.ts';
export declare const ExposeMutation: unique symbol;
export declare const ExposeQuery: unique symbol;
export declare const ExposeRefAddr: unique symbol;
export declare class EnneractMagic {
    readonly engine: EnneractEngine;
    constructor(engine: EnneractEngine);
    addTemplateEntry: (target: MagicHat, property: string, nextItem: TemplatePromiseItem, arrayIndex?: number, type?: "template" | "buffer") => string;
    private isObjectOrTrue;
    private processWhereQuery;
    private processWhere;
    private buildGetQuery;
    private applyFilters;
    buildGetResponse: (query: GetQuery, addrs: number[], aliases: Record<string, number>, getAddrContent: (addr: number, alias: string) => Promise<string | number>) => Promise<Record<string, unknown>>;
    transformPromiseTemplate: (target: MagicHat) => Promise<[TemplateItem, TemplateItem, TemplateItem][]>;
    postget(target: MagicHat, response: MessageTypes.SearchResponse['payload']): Promise<Record<string, unknown>[]>;
    get(target: MagicHat, isRef?: boolean): (params: Record<string, unknown>) => Promise<Record<string, unknown>[]>;
    link(target: MagicHat): (...params: any[]) => Promise<unknown>;
    unlink(target: MagicHat): (...params: any[]) => Promise<number | false>;
    update(target: MagicHat): (...params: any[]) => Promise<false | {
        linked: number;
        unlinked: number | boolean;
    }>;
    delete(target: MagicHat): Promise<number | false>;
    private _deleteAddrs;
    one(target: MagicHat, isRef?: true | {
        addr: true;
    }): Promise<string | number | {
        addr: number;
    }>;
    many(target: MagicHat, isRef?: true | {
        addr: true;
    }): Promise<(string | number)[] | {
        addr: number;
    }[]>;
    where(target: MagicHat, ref?: unknown): (params: Record<PropertyKey, any>) => unknown;
    private normalizeCombinations;
    buildCreationTemplate(target: MagicHat, slice: Record<string, unknown> | Record<string, unknown>[], isReverse?: boolean, ignoreInitialConcept?: boolean, rootInnerHatIndex?: number): string[];
    generate(source?: MagicHat, knownRefAddr?: number): unknown;
}
