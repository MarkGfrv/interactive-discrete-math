import { ScAddr } from "./ScAddr";
import { ScType } from "./ScType";
declare type ScTemplateParamValue = string | ScAddr | ScType;
declare type ScTemplateParam = [ScTemplateParamValue, string] | ScTemplateParamValue;
export interface ScTemplateValue {
    value: ScTemplateParamValue;
    alias: string | null;
}
export interface ScTemplateTriple {
    source: ScTemplateValue;
    connector: ScTemplateValue;
    target: ScTemplateValue;
}
export declare class ScTemplate {
    private _triples;
    get triples(): ScTemplateTriple[];
    triple(param1: ScTemplateParam, param2: ScTemplateParam, param3: ScTemplateParam): ScTemplate;
    quintuple(param1: ScTemplateParam, param2: ScTemplateParam, param3: ScTemplateParam, param4: ScTemplateParam, param5: ScTemplateParam): ScTemplate;
    /*!
     * @deprecated ScTemplate `tripleWithRelation` method is deprecated. Use `quintuple` instead.
     */
    tripleWithRelation(param1: ScTemplateParam, param2: ScTemplateParam, param3: ScTemplateParam, param4: ScTemplateParam, param5: ScTemplateParam): ScTemplate;
    private splitTemplateParam;
}
export {};
