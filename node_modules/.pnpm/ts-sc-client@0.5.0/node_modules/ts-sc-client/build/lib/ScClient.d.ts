import { ScAddr } from "./ScAddr";
import { ScConstruction } from "./ScConstruction";
import { ScEventSubscription } from "./ScEventSubscription";
import { ScEventSubscriptionParams } from "./ScEventSubscriptionParams";
import { ScLinkContent } from "./ScLinkContent";
import { ScTemplate } from "./ScTemplate";
import { ScTemplateResult } from "./ScTemplateResult";
import { ScType } from "./ScType";
import { ScError, TAction, ISCs } from "./types";
import { KeynodesToObject } from "./types";
export interface Response<T = any> {
    id: number;
    status: boolean;
    event: boolean;
    payload: T;
    errors: ScError;
}
export interface Request<T = any> {
    id: number;
    type: TAction;
    payload: T;
}
interface KeynodeParam<ParamId extends string = string> {
    id: ParamId;
    type: ScType;
}
declare type SocketEvent = "close" | "error" | "open";
interface IParams {
    keynodesCacheSize?: number;
}
export declare class ScClient {
    private _eventID;
    private _messageQueue;
    private _socket;
    private _callbacks;
    private _events;
    private _keynodesCache;
    private _keynodesCacheSize;
    constructor(arg: string | WebSocket, params?: IParams);
    addEventListener(evt: SocketEvent, cb: () => void): void;
    removeEventListener(evt: SocketEvent, cb: () => void): void;
    private sendMessagesFromQueue;
    private onMessage;
    private sendMessage;
    private resolveOrReject;
    getUser(): Promise<ScAddr>;
    getElementsTypes(addrs: ScAddr[]): Promise<ScType[]>;
    /*!
     * @deprecated ScClient `checkElements` method is deprecated. Use `getElementsTypes` instead.
     */
    checkElements(addrs: ScAddr[]): Promise<ScType[]>;
    generateElements(construction: ScConstruction): Promise<ScAddr[]>;
    /*!
     * @deprecated ScClient `createElements` method is deprecated. Use `generateElements` instead.
     */
    createElements(construction: ScConstruction): Promise<ScAddr[]>;
    generateElementsBySCs(scsText: string[] | ISCs[]): Promise<boolean[]>;
    /*!
     * @deprecated ScClient `createElementsBySCs` method is deprecated. Use `generateElementsBySCs` instead.
     */
    createElementsBySCs(scsText: string[] | ISCs[]): Promise<boolean[]>;
    eraseElements(addrs: ScAddr[]): Promise<boolean>;
    /*!
     * @deprecated ScClient `deleteElements` method is deprecated. Use `eraseElements` instead.
     */
    deleteElements(addrs: ScAddr[]): Promise<boolean>;
    setLinkContents(contents: ScLinkContent[]): Promise<boolean[]>;
    getLinkContents(addrs: ScAddr[]): Promise<ScLinkContent[]>;
    searchLinksByContents(contents: string[]): Promise<ScAddr[][]>;
    /*!
     * @deprecated ScClient `getLinksByContents` method is deprecated. Use `searchLinksByContents` instead.
     */
    getLinksByContents(contents: string[]): Promise<ScAddr[][]>;
    searchLinksByContentSubstrings(contents: string[]): Promise<ScAddr[][]>;
    /*!
     * @deprecated ScClient `getLinksByContentSubstrings` method is deprecated. Use `searchLinksByContentSubstrings` instead.
     */
    getLinksByContentSubstrings(contents: string[]): Promise<ScAddr[][]>;
    searchLinkContentsByContentSubstrings(contents: string[]): Promise<string[][]>;
    /*!
     * @deprecated ScClient `getLinksContentsByContentSubstrings` method is deprecated. Use `searchLinkContentsByContentSubstrings` instead.
     */
    getLinksContentsByContentSubstrings(contents: string[]): Promise<string[][]>;
    resolveKeynodes<ParamId extends string>(params: ReadonlyArray<KeynodeParam<ParamId>>): Promise<Record<ParamId, ScAddr>>;
    private processTripleItem;
    private processTemplate;
    private processTemplateParams;
    searchByTemplate(template: ScTemplate | ScAddr | string, params?: Record<string, ScAddr | string>): Promise<ScTemplateResult[]>;
    /*!
     * @deprecated ScClient `templateSearch` method is deprecated. Use `searchByTemplate` instead.
     */
    templateSearch(template: ScTemplate | ScAddr | string, params?: Record<string, ScAddr | string>): Promise<ScTemplateResult[]>;
    generateByTemplate(template: ScTemplate | ScAddr | string, params?: Record<string, ScAddr | string>): Promise<ScTemplateResult | null>;
    /*!
     * @deprecated ScClient `templateGenerate` method is deprecated. Use `generateByTemplate` instead.
     */
    templateGenerate(template: ScTemplate | ScAddr | string, params?: Record<string, ScAddr | string>): Promise<ScTemplateResult | null>;
    createElementaryEventSubscriptions(eventOrEvents: ScEventSubscriptionParams[] | ScEventSubscriptionParams): Promise<ScEventSubscription[]>;
    /*!
     * @deprecated ScClient `eventsCreate` method is deprecated. Use `createElementaryEventSubscriptions` instead.
     */
    eventsCreate(eventOrEvents: ScEventSubscriptionParams[] | ScEventSubscriptionParams): Promise<ScEventSubscription[]>;
    destroyElementaryEventSubscriptions(eventIdOrIds: number[] | number): Promise<void>;
    /*!
     * @deprecated ScClient `eventsDestroy` method is deprecated. Use `destroyElementaryEventSubscriptions` instead.
     */
    eventsDestroy(eventIdOrIds: number[] | number): Promise<void>;
    searchKeynodes<K extends [string, ...string[]]>(...keynodes: K): Promise<KeynodesToObject<K>>;
    /*!
     * @deprecated ScClient `findKeynodes` method is deprecated. Use `searchKeynodes` instead.
     */
    findKeynodes<K extends [string, ...string[]]>(...keynodes: K): Promise<KeynodesToObject<K>>;
}
export {};
