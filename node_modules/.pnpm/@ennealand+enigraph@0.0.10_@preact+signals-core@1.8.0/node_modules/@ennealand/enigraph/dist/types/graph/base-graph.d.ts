import { SignalLike } from '$lib/utils';
import { type DeepSignal } from 'deepsignal';
import { Ref } from 'preact';
import { JSX } from 'preact/jsx-runtime';
import { type Elements, type IEdge, type INode } from '../types';
export interface Props {
    elements: Elements | DeepSignal<Elements>;
    width: number;
    height: number;
    centerX: number;
    centerY: number;
    children?: JSX.Element | JSX.Element[];
    before?: JSX.Element;
    inner?: JSX.Element;
    innerHtml?: JSX.Element;
    onMouseDown?: (e: JSX.TargetedMouseEvent<SVGSVGElement>) => void;
    onWheel?: (e: JSX.TargetedWheelEvent<SVGSVGElement | HTMLDivElement>) => void;
    onMouseEnter?: (e: JSX.TargetedMouseEvent<SVGSVGElement>) => void;
    onMouseLeave?: (e: JSX.TargetedMouseEvent<SVGSVGElement>) => void;
    onNodeMouseDown?: (e: JSX.TargetedMouseEvent<SVGGElement>, node: INode, index: number) => void;
    onNodeMouseUp?: (e: JSX.TargetedMouseEvent<SVGGElement>, node: INode, index: number) => void;
    onEdgeMouseDown?: (e: JSX.TargetedMouseEvent<SVGGElement>, edge: IEdge, index: number) => void;
    onEdgeMouseUp?: (e: JSX.TargetedMouseEvent<SVGGElement>, edge: IEdge, index: number) => void;
    onTextDoubleClick?: (node: INode) => void;
    /** Set of element ids to highlight */
    highlight?: SignalLike<Set<number>>;
    /** Set of element ids that are non-selectable */
    noselect?: SignalLike<Set<number> | boolean>;
    /** Set of element ids that have labels disabled */
    nolabels?: SignalLike<Set<number> | true | undefined>;
    pref?: Ref<SVGSVGElement>;
    movable?: SignalLike<boolean>;
    dragging?: SignalLike<boolean>;
    selecting?: SignalLike<boolean>;
    transform?: SignalLike<{
        x: number;
        y: number;
        zoom: number;
        moving: boolean;
    }>;
    padding?: number;
}
type HookedProps = 'width' | 'height' | 'centerX' | 'centerY';
export declare const useBaseGraph: (width: number, height: number) => {
    BaseGraph: (props: Omit<Props, HookedProps> & {
        width?: number | undefined;
        height?: number | undefined;
        centerX?: number | undefined;
        centerY?: number | undefined;
    }) => JSX.Element;
    getInnerPoint: (x: number, y: number) => [number, number];
};
export declare const BaseGraph: (props: Props) => JSX.Element;
export {};
