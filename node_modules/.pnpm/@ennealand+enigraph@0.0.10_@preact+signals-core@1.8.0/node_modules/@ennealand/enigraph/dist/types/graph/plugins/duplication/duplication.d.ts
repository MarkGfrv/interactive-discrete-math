import { EdgeType, IEdge, INode, NodeType } from '$lib/types';
import { DeepSignal } from 'deepsignal';
type Props = {
    addNode(node: DeepSignal<INode>): void;
    addEdge(edge: IEdge): void;
    nodes: DeepSignal<INode[]>;
    selection?: DeepSignal<Set<number>>;
};
export declare const useDuplication: (props: Props) => {
    createNode: (x: number, y: number, type: NodeType) => void;
    startDrawingEdge: (x: number, y: number, type: EdgeType) => void;
    drawingEdge: {
        $values?: import("@preact/signals-core").Signal<Set<{
            type: EdgeType;
            source: DeepSignal<INode>;
            target: {
                x: number;
                y: number;
            };
        }>> | undefined;
    } & {
        values: {
            $clear?: undefined;
            $forEach?: undefined;
            $entries?: undefined;
            $keys?: undefined;
            $values?: undefined;
            $delete?: undefined;
            $add?: undefined;
            $has?: undefined;
            $size?: import("@preact/signals-core").Signal<number> | undefined;
        } & {
            add: (value: {
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }) => Set<{
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }>;
            clear: () => void;
            delete: (value: {
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }) => boolean;
            forEach: (callbackfn: (value: {
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }, value2: {
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }, set: Set<{
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }>) => void, thisArg?: any) => void;
            has: (value: {
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }) => boolean;
            readonly size: number;
            entries: () => IterableIterator<[{
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }, {
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }]>;
            keys: () => IterableIterator<{
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }>;
            values: () => IterableIterator<{
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }>;
            [Symbol.iterator]: () => IterableIterator<{
                type: EdgeType;
                source: DeepSignal<INode>;
                target: {
                    x: number;
                    y: number;
                };
            }>;
            readonly [Symbol.toStringTag]: string;
        };
    };
};
export {};
