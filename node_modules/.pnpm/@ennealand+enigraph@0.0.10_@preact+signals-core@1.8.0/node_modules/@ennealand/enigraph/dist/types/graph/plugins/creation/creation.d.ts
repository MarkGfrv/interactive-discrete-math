import { EdgeType, IEdge, INode, NodeType } from '$lib/types';
import { ReadonlySignal } from '@preact/signals';
import { DeepSignal } from 'deepsignal';
import { JSX } from 'preact/jsx-runtime';
type Props = {
    addNode(node: INode): void;
    addEdge(edge: IEdge): void;
    nodes: DeepSignal<INode[]>;
    getInnerPoint: (x: number, y: number) => readonly [number, number];
    localize: (x: number, y: number) => readonly [number, number];
    selection?: ReadonlySignal<Set<number>>;
    Edge?: (props: CreationEdge) => JSX.Element;
};
export type CreationEdge = {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
    type: EdgeType;
};
export declare const withCreation: (props: Props) => {
    createNode: (x: number, y: number, type: NodeType) => void;
    startDrawingEdge: (x: number, y: number, type: EdgeType) => void;
    updateDrawingEdges: (e: MouseEvent) => void;
    createEdges: (selection: Set<number>, nodes: DeepSignal<INode[]>) => void;
    DrawingEdges: () => JSX.Element | null;
    isDrawingEdges: ReadonlySignal<boolean>;
};
export {};
