import { useSignal } from '@preact/signals';
import { useDeepSignal } from 'deepsignal';
export const withMovable = (props) => {
    const centerX = props.width / 2;
    const centerY = props.height / 2;
    const transform = useDeepSignal({ x: 0, y: 0, zoom: 1, moving: false });
    const localize = (x, y) => [(x - transform.x) / transform.zoom, (y - transform.y) / transform.zoom];
    const globalize = (x, y) => [x * transform.zoom + transform.x, y * transform.zoom + transform.y];
    // Dragging-based moving
    const startPoint = useSignal(null);
    const startMoving = (e) => {
        const [x, y] = props.getInnerPoint(e.clientX, e.clientY);
        startPoint.value = { x, y };
    };
    const updateMoving = (e) => {
        const [x, y] = props.getInnerPoint(e.clientX, e.clientY);
        startPoint.value = { x, y };
    };
    const stopMoving = () => {
        startPoint.value = null;
    };
    // Touch-based moving
    const onwheel = (e) => {
        e.preventDefault();
        if (e.ctrlKey) {
            let deltaZoom = e.deltaY * 0.01;
            if (transform.zoom - deltaZoom < 0.1)
                deltaZoom = transform.zoom - 0.1;
            else if (transform.zoom - deltaZoom > 5)
                deltaZoom = transform.zoom - 5;
            transform.x += (deltaZoom / transform.zoom) * (e.offsetX - centerX - transform.x);
            transform.y += (deltaZoom / transform.zoom) * (e.offsetY - centerY - transform.y);
            transform.zoom -= deltaZoom;
        }
        else {
            transform.x -= e.deltaX;
            transform.y -= e.deltaY;
        }
    };
    return {
        transform,
        centerX,
        centerY,
        localize,
        globalize,
        onwheel,
        zoom: transform.$zoom,
        startMoving,
        updateMoving,
        stopMoving,
    };
};
