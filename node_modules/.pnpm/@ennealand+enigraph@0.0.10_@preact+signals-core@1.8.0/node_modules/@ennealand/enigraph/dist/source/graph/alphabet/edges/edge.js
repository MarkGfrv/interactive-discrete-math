import { jsx as _jsx, jsxs as _jsxs } from "preact/jsx-runtime";
import { EdgeType } from '$lib/types';
import { ArcConst } from './alphabet/ArcConst';
import { ArcConstPermNegAccess } from './alphabet/ArcConstPermNegAccess';
import { ArcConstPermPosAccess } from './alphabet/ArcConstPermPosAccess';
import { EdgeConst } from './alphabet/EdgeConst';
import { ArcConstPermFuzAccess } from './alphabet/_ArcConstPermFuzAccess';
import style from './edge.module.css';
import { cl } from '$lib/utils';
const EDGE_TYPES = {
    [EdgeType.EdgeConst]: EdgeConst,
    [EdgeType.ArcConst]: ArcConst,
    [EdgeType.ArcConstPermPosAccess]: ArcConstPermPosAccess,
    [EdgeType.ArcConstPermNegAccess]: ArcConstPermNegAccess,
    [EdgeType.ArcConstPermFuzAccess]: ArcConstPermFuzAccess,
};
export const Edge = ({ type, noselect, x1 = 0, y1 = 0, x2 = 0, y2 = 0, mousedown, mouseup, highlight, padding = 0, }) => {
    const MyEdge = EDGE_TYPES[type];
    const length = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    const dx = length && ((x2 - x1) / length) * padding;
    const dy = length && ((y2 - y1) / length) * padding;
    return (_jsxs("g", { class: cl(style.container, noselect && style.noselect, highlight && style.highlight), onMouseDown: mousedown, onMouseUp: mouseup, children: [_jsx("path", { d: `M ${x1 + dx} ${y1 + dy} L ${x2 - dx} ${y2 - dy}`, "stroke-width": '15', stroke: 'transparent' }), _jsx(MyEdge, { x1: x1 + dx, y1: y1 + dy, x2: x2 - dx, y2: y2 - dy })] }));
};
