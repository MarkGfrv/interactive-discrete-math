import { useDeepSignal } from 'deepsignal';
export const useDuplication = (props) => {
    const drawingEdges = useDeepSignal({
        values: new Set(),
    });
    const createNode = (x, y, type) => {
        const newNode = { id: 0, type, x, y };
        props.addNode(newNode);
        if (drawingEdges.values.size) {
            for (const { type, source } of drawingEdges.values) {
                props.addEdge({ id: 0, type, source, target: newNode });
            }
            drawingEdges.values.clear();
        }
    };
    const startDrawingEdge = (x, y, type) => {
        if (!props.selection)
            return;
        for (const nodeIndex of props.selection) {
            drawingEdges.values.add({
                type,
                source: props.nodes[nodeIndex],
                target: { x, y },
            });
        }
    };
    return { createNode, startDrawingEdge, drawingEdge: drawingEdges };
};
