import { jsx as _jsx } from "preact/jsx-runtime";
import { effect, useComputed, useSignal } from '@preact/signals';
import { useCallback, useEffect } from 'preact/hooks';
import { BaseGroup } from './base-group';
import { getGroupPosition } from './group-position';
import style from './grouping.module.css';
export const withGrouping = (props) => {
    const opened = useSignal(new Set());
    const selected = useSignal(null);
    useEffect(() => {
        return effect(() => {
            for (const group of props.groups) {
                // NOTE: Might worth a partial update instead? (any reason to though?)
                const newPosition = getGroupPosition(props.nodes, group.values);
                for (const [key, value] of Object.entries(newPosition)) {
                    if (group.position[key] !== value)
                        group.position[key] = value;
                }
            }
        });
    }, [props.nodes, props.groups]);
    const openGroup = (id) => {
        opened.value.add(id);
        opened.value = new Set(opened.value);
        if (id === selected.value)
            selected.value = null;
    };
    const closeGroup = (id) => {
        opened.value.delete(id);
        opened.value = new Set(opened.value);
    };
    const closeAllGroups = () => {
        opened.value = new Set();
    };
    const selectGroup = (id) => (selected.value = id);
    const deselectGroup = () => (selected.value = null);
    const selectedGroup = useComputed(() => selected.value && props.groups.find(({ id }) => id === selected.value)?.values);
    const Group = useCallback((args) => {
        return (_jsx("g", { class: args.placeholder && style.placeholder, children: props.groups.map(group => (_jsx(BaseGroup, { id: group.id, ...group.position, onMouseDown: args.onMouseDown, opened: !args.nohighlight && opened.value?.has(group.id), selected: args.customSelection
                    ? args.customSelection.has(group.id)
                    : !args.nohighlight && selected.value === group.id, indicator: args.customIndicators?.get(group.id) }, group.id))) }));
    }, [props.groups]);
    return {
        Group,
        openGroup,
        closeGroup,
        closeAllGroups,
        selectGroup,
        deselectGroup,
        selectedGroup,
        selectedGroupId: selected,
    };
};
