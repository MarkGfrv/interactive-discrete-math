import { jsx as _jsx, jsxs as _jsxs } from "preact/jsx-runtime";
import { Edge, Node } from '$lib/graph/alphabet';
import style from './disk.module.css';
export const BaseDisk = (props) => (_jsx("g", { transform: `translate(${props.x} ${props.y})`, children: _jsx("g", { class: style.disk, children: props.type === 'node'
            ? props.nodeOptions.map(({ type, x1, y1, x2, y2, textX, textY, nodeX, nodeY }, index) => (_jsxs("g", { onMouseDown: e => e.stopPropagation(), onMouseUp: e => props.click(props.type, props.x, props.y, e, type), children: [_jsx("path", { d: `M ${x1} ${y1} A 70 70 0 0 1 ${x2} ${y2}`, "stroke-width": '90' }), _jsx("text", { x: textX, y: textY, "stroke-width": '90', children: index + 1 }), _jsx(Node, { x: nodeX, y: nodeY, type: type, noselect: true })] }, type)))
            : props.edgeOptions.map(({ type, x1, y1, x2, y2, textX, textY, edgeX1, edgeY1, edgeX2, edgeY2 }, index) => (_jsxs("g", { onMouseDown: e => e.stopPropagation(), onMouseUp: e => props.click(props.type, props.x, props.y, e, type), children: [_jsx("path", { d: `M ${x1} ${y1} A 70 70 0 0 1 ${x2} ${y2}`, "stroke-width": '90' }), _jsx("text", { x: textX, y: textY, "stroke-width": '90', children: index + 1 }), _jsx(Edge, { x1: edgeX1, y1: edgeY1, x2: edgeX2, y2: edgeY2, type: type, noselect: true })] }, type))) }) }));
