import { jsx as _jsx } from "preact/jsx-runtime";
import { useSignal } from '@preact/signals';
import { useCallback, useEffect, useRef } from 'preact/hooks';
import style from './renaming.module.css';
export const withRenaming = (props) => {
    const isRenaming = useSignal(null);
    const startRenaming = (node) => {
        isRenaming.value = { node };
    };
    const stopRenaming = () => {
        isRenaming.value = null;
    };
    const component = useCallback(() => isRenaming.value && (_jsx(RenamingArea, { x: Math.round(isRenaming.value.node.x) || 0, y: Math.round(isRenaming.value.node.y) || 0, value: isRenaming.value.node.label ?? '', submit: value => isRenaming.value && (props.submit?.(isRenaming.value.node, value), stopRenaming()) })), [isRenaming]);
    return { RenamingArea: component, startRenaming, stopRenaming, isRenaming };
};
export const RenamingArea = (props) => {
    const ref = useRef(null);
    useEffect(() => ref.current?.focus(), []);
    const onKeyDown = (e) => {
        if (e.key === 'Enter')
            props.submit(e.currentTarget.value);
    };
    return (_jsx("div", { class: style.component, style: { transform: `translate(${props.x + 19 - 5.8 - 3.5}px, ${props.y - 11 - 5.8}px)` }, children: _jsx("input", { ref: ref, class: style.input, type: 'text', value: props.value, onKeyDown: onKeyDown, onBlur: e => props.submit(e.currentTarget.value) }) }));
};
