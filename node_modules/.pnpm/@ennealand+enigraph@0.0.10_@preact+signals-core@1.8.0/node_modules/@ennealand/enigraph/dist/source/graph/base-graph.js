import { jsx as _jsx, jsxs as _jsxs } from "preact/jsx-runtime";
import { ensureValue } from '$lib/utils';
import { useCallback, useMemo, useRef } from 'preact/hooks';
import { Alphabet } from './alphabet/alphabet';
import { Edge } from './alphabet/edges/edge';
import { Node } from './alphabet/nodes/node';
import style from './graph.module.css';
export const useBaseGraph = (width, height) => {
    const ref = useRef(null);
    const centerX = width && useMemo(() => width / 2, [width]);
    const centerY = height && useMemo(() => height / 2, [height]);
    const component = useCallback((props) => (_jsx(BaseGraph, { width: width, height: height, centerX: centerX, centerY: centerY, ...props, pref: ref })), [width, height]);
    const getInnerPoint = useCallback((x, y) => {
        if (!ref.current)
            return [0, 0];
        const rect = ref.current.getBoundingClientRect();
        return [x - rect.x - centerX, y - rect.y - centerY];
    }, [ref.current]);
    return { BaseGraph: component, getInnerPoint };
};
export const BaseGraph = (props) => {
    const transform = ensureValue(props.transform);
    const noselect = ensureValue(props.noselect);
    const nolabels = ensureValue(props.nolabels);
    return (_jsxs("div", { class: style.graph, "data-movable": ensureValue(props.movable) ? '' : undefined, "data-moving": transform?.moving ? '' : undefined, "data-dragging": ensureValue(props.dragging) ? '' : undefined, "data-selecting": ensureValue(props.selecting) ? '' : undefined, children: [_jsxs("svg", { ref: props.pref, xmlns: 'http://www.w3.org/2000/svg', xmlnsXlink: 'http://www.w3.org/1999/xlink', viewBox: `-${props.centerX} -${props.centerY} ${props.width} ${props.height}`, width: `${props.width}px`, height: `${props.height}px`, onContextMenu: e => (e.preventDefault(), e.stopPropagation()), onMouseDown: props.onMouseDown, onWheel: props.onWheel, onMouseEnter: props.onMouseEnter, onMouseLeave: props.onMouseLeave, children: [_jsx(Alphabet, {}), props.elements && (_jsxs("g", { transform: transform && `translate(${transform.x} ${transform.y}) scale(${transform.zoom})`, children: [props.before, props.elements.edges.map((edge, index) => (_jsx(Edge, { type: edge.type, x1: edge.source.x, y1: edge.source.y, x2: edge.target.x, y2: edge.target.y, mousedown: e => props.onEdgeMouseDown?.(e, edge, index), mouseup: e => props.onEdgeMouseUp?.(e, edge, index), highlight: ensureValue(props.highlight)?.has(edge.id), noselect: noselect && (noselect === true || noselect.has(edge.id)), padding: props.padding }, edge.id))), props.elements.nodes.map((node, index) => (_jsx(Node, { type: node.type, x: Math.round(node.x) || 0, y: Math.round(node.y) || 0, label: nolabels && (nolabels === true || nolabels.has(node.id)) ? undefined : node.label, mousedown: e => props.onNodeMouseDown?.(e, node, index), mouseup: e => props.onNodeMouseUp?.(e, node, index), highlight: ensureValue(props.highlight)?.has(node.id), noselect: noselect && (noselect === true || noselect.has(node.id)), padding: props.padding && props.padding + 1, textDoubleClick: () => props.onTextDoubleClick?.(node) }, node.id))), props.inner] })), props.children] }), _jsx("div", { class: style.innerHtml, style: {
                    transform: transform && `translate(${transform.x}px, ${transform.y}px) scale(${transform.zoom}) translate(50%, 50%)`,
                }, onWheel: props.onWheel, children: props.innerHtml })] }));
};
