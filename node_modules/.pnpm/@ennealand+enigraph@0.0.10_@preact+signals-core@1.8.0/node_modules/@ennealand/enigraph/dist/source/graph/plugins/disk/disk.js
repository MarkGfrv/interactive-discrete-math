import { jsx as _jsx } from "preact/jsx-runtime";
import { useDeepSignal } from 'deepsignal';
import { useCallback, useEffect, useMemo } from 'preact/hooks';
import { BaseDisk } from './base-disk';
import { DefaultEdgeTypes, DefaultNodeTypes, getEdgeOptions, getNodeOptions } from './options';
export const withDisk = (click, options) => {
    const nodeOptions = useMemo(() => getNodeOptions(options?.nodeTypes ?? DefaultNodeTypes), [options?.nodeTypes]);
    const edgeOptions = useMemo(() => getEdgeOptions(options?.edgeTypes ?? DefaultEdgeTypes), [options?.edgeTypes]);
    const menu = useDeepSignal({ x: 0, y: 0, type: 'node', shown: false });
    const mouseup = useCallback((e) => {
        if (options?.getInnerPoint) {
            const [x, y] = options.getInnerPoint(e.clientX, e.clientY);
            const r = Math.sqrt((menu.x - x) ** 2 + (menu.y - y) ** 2);
            if (r <= 5)
                return;
        }
        menu.shown = false;
        cleanup();
    }, []);
    const keydown = useCallback((e) => {
        if (e.code === 'Escape') {
            menu.shown = false;
            cleanup();
        }
    }, []);
    const cleanup = () => {
        document.removeEventListener('keydown', keydown);
        document.removeEventListener('mouseup', mouseup);
    };
    // Clean up safely on unmount.
    useEffect(() => cleanup, []);
    const showDisk = (type, x, y) => {
        menu.type = type;
        menu.x = x;
        menu.y = y;
        menu.shown = true;
        document.addEventListener('mouseup', mouseup, { once: true });
        document.addEventListener('keydown', keydown, { once: true });
    };
    const hideDisk = () => {
        menu.shown = false;
    };
    const Disk = () => menu.shown ? (_jsx(BaseDisk, { x: menu.x, y: menu.y, type: menu.type, click: click, nodeOptions: nodeOptions, edgeOptions: edgeOptions })) : null;
    return { Disk, showDisk, hideDisk, isDiskOpened: menu.$shown };
};
