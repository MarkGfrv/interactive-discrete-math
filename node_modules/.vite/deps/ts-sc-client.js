import {
  __commonJS
} from "./chunk-TYRVL62N.js";

// node_modules/.pnpm/ts-sc-client@0.5.0/node_modules/ts-sc-client/build/sc.js
var require_sc = __commonJS({
  "node_modules/.pnpm/ts-sc-client@0.5.0/node_modules/ts-sc-client/build/sc.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.sc = t() : e.sc = t();
    }(exports, () => (() => {
      "use strict";
      var e = [function(e2, t2, s) {
        var n = this && this.__createBinding || (Object.create ? function(e3, t3, s2, n2) {
          void 0 === n2 && (n2 = s2);
          var r2 = Object.getOwnPropertyDescriptor(t3, s2);
          r2 && !("get" in r2 ? !t3.__esModule : r2.writable || r2.configurable) || (r2 = { enumerable: true, get: function() {
            return t3[s2];
          } }), Object.defineProperty(e3, n2, r2);
        } : function(e3, t3, s2, n2) {
          void 0 === n2 && (n2 = s2), e3[n2] = t3[s2];
        }), r = this && this.__exportStar || function(e3, t3) {
          for (var s2 in e3)
            "default" === s2 || Object.prototype.hasOwnProperty.call(t3, s2) || n(t3, e3, s2);
        };
        Object.defineProperty(t2, "__esModule", { value: true }), r(s(1), t2), r(s(2), t2), r(s(10), t2), r(s(11), t2), r(s(4), t2), r(s(12), t2), r(s(5), t2), r(s(13), t2), r(s(14), t2), r(s(6), t2), r(s(7), t2), r(s(15), t2), r(s(8), t2), r(s(3), t2);
      }, (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScAddr = void 0, t2.ScAddr = class {
          constructor(e3 = 0) {
            this._value = e3;
          }
          get value() {
            return this._value;
          }
          isValid() {
            return 0 != this._value;
          }
          equal(e3) {
            return this._value === e3._value;
          }
        };
      }, function(e2, t2, s) {
        var n = this && this.__awaiter || function(e3, t3, s2, n2) {
          return new (s2 || (s2 = Promise))(function(r2, c2) {
            function o2(e4) {
              try {
                i2(n2.next(e4));
              } catch (e5) {
                c2(e5);
              }
            }
            function a2(e4) {
              try {
                i2(n2.throw(e4));
              } catch (e5) {
                c2(e5);
              }
            }
            function i2(e4) {
              var t4;
              e4.done ? r2(e4.value) : (t4 = e4.value, t4 instanceof s2 ? t4 : new s2(function(e5) {
                e5(t4);
              })).then(o2, a2);
            }
            i2((n2 = n2.apply(e3, t3 || [])).next());
          });
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScClient = void 0;
        const r = s(3), c = s(1), o = s(4), a = s(5), i = s(6), _ = s(7), p = s(9), d = s(8), l = { keynodesCacheSize: d.DEFAULT_KEYNODES_CACHE_SIZE };
        t2.ScClient = class {
          constructor(e3, t3 = l) {
            var s2;
            this.sendMessagesFromQueue = () => {
              this._messageQueue.forEach((e4) => e4()), this._messageQueue = [];
            }, this.onMessage = (e4) => {
              var t4;
              const s3 = JSON.parse(e4.data.toString()), n2 = s3.id, r2 = this._callbacks[n2];
              if (s3.event) {
                const e5 = this._events[n2];
                if (!e5)
                  throw `Can't find callback for an event ${n2}`;
                null === (t4 = e5.callback) || void 0 === t4 || t4.call(e5, new c.ScAddr(s3.payload[0]), new c.ScAddr(s3.payload[1]), new c.ScAddr(s3.payload[2]), e5.id);
              } else {
                if (!r2)
                  throw `Can't find callback for a command ${n2}`;
                delete this._callbacks[n2], r2(s3);
              }
            }, this._socket = "string" == typeof e3 ? new WebSocket(e3) : e3, this._socket.onmessage = this.onMessage, this._socket.onopen = this.sendMessagesFromQueue, this._messageQueue = [], this._callbacks = {}, this._events = {}, this._eventID = 1, this._keynodesCacheSize = null !== (s2 = t3.keynodesCacheSize) && void 0 !== s2 ? s2 : d.DEFAULT_KEYNODES_CACHE_SIZE, this._keynodesCache = /* @__PURE__ */ new Map();
          }
          addEventListener(e3, t3) {
            this._socket.addEventListener(e3, t3);
          }
          removeEventListener(e3, t3) {
            this._socket.removeEventListener(e3, t3);
          }
          sendMessage(e3, t3, s2) {
            if (this._eventID++, this._callbacks[this._eventID])
              throw "Invalid state of messages queue";
            this._callbacks[this._eventID] = s2;
            const n2 = JSON.stringify({ id: this._eventID, type: e3, payload: t3 }), r2 = () => this._socket.send(n2);
            this._socket.readyState === this._socket.OPEN ? r2() : this._messageQueue.push(r2);
          }
          resolveOrReject(e3, t3, s2, n2) {
            return 0 === n2.length ? e3(s2) : t3("string" == typeof n2 ? n2 : n2.map(({ message: e4 }) => e4));
          }
          getUser() {
            return n(this, void 0, void 0, function* () {
              return new Promise((e3, t3) => {
                this.sendMessage("connection_info", null, ({ payload: s2, errors: n2 }) => {
                  const r2 = new c.ScAddr(s2.user_addr);
                  this.resolveOrReject(e3, t3, r2, n2);
                });
              });
            });
          }
          getElementsTypes(e3) {
            return n(this, void 0, void 0, function* () {
              return new Promise((t3, s2) => {
                if (!e3.length)
                  return t3([]);
                const n2 = e3.map(({ value: e4 }) => e4);
                this.sendMessage("check_elements", n2, ({ payload: e4, errors: n3 }) => {
                  const r2 = e4.map((e5) => new _.ScType(e5));
                  this.resolveOrReject(t3, s2, r2, n3);
                });
              });
            });
          }
          checkElements(e3) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `checkElements` method is deprecated. Use `getElementsTypes` instead."), this.getElementsTypes(e3);
            });
          }
          generateElements(e3) {
            return n(this, void 0, void 0, function* () {
              return new Promise((t3, s2) => {
                const n2 = e3.commands.map((t4) => t4.type.isLink() ? { el: "link", type: t4.type.value, content: t4.data.content, content_type: t4.data.type } : t4.type.isNode() ? { el: "node", type: t4.type.value } : t4.type.isConnector() ? { el: "edge", type: t4.type.value, src: (0, p.transformConnectorInfo)(e3, t4.data.src), trg: (0, p.transformConnectorInfo)(e3, t4.data.trg) } : void (0, r.invalidValue)("Unknown type")).filter((e4) => Boolean(e4));
                this.sendMessage("create_elements", n2, ({ payload: e4, errors: n3 }) => {
                  const r2 = e4.map((e5) => new c.ScAddr(e5));
                  this.resolveOrReject(t3, s2, r2, n3);
                });
              });
            });
          }
          createElements(e3) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `createElements` method is deprecated. Use `generateElements` instead."), this.generateElements(e3);
            });
          }
          generateElementsBySCs(e3) {
            return n(this, void 0, void 0, function* () {
              return new Promise((t3, s2) => {
                const n2 = e3.map((e4) => {
                  var t4;
                  return "string" == typeof e4 ? { scs: e4, output_structure: 0 } : { scs: e4.scs, output_structure: null === (t4 = e4.output_structure) || void 0 === t4 ? void 0 : t4.value };
                });
                this.sendMessage("create_elements_by_scs", n2, ({ payload: e4, errors: n3 }) => {
                  this.resolveOrReject(t3, s2, e4, n3);
                });
              });
            });
          }
          createElementsBySCs(e3) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `createElementsBySCs` method is deprecated. Use `generateElementsBySCs` instead."), this.generateElementsBySCs(e3);
            });
          }
          eraseElements(e3) {
            return n(this, void 0, void 0, function* () {
              return new Promise((t3, s2) => {
                const n2 = e3.map(({ value: e4 }) => e4);
                this.sendMessage("delete_elements", n2, ({ status: e4, errors: n3 }) => {
                  this.resolveOrReject(t3, s2, e4, n3);
                });
              });
            });
          }
          deleteElements(e3) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `deleteElements` method is deprecated. Use `eraseElements` instead."), this.eraseElements(e3);
            });
          }
          setLinkContents(e3) {
            return n(this, void 0, void 0, function* () {
              return new Promise((t3, s2) => {
                const n2 = e3.map((e4) => {
                  var t4;
                  return { command: "set", type: e4.typeToStr(), data: e4.data, addr: null === (t4 = e4.addr) || void 0 === t4 ? void 0 : t4.value };
                });
                this.sendMessage("content", n2, ({ payload: e4, errors: n3 }) => {
                  this.resolveOrReject(t3, s2, e4, n3);
                });
              });
            });
          }
          getLinkContents(e3) {
            return n(this, void 0, void 0, function* () {
              return new Promise((t3, s2) => {
                const n2 = e3.map(({ value: e4 }) => ({ command: "get", addr: e4 }));
                this.sendMessage("content", n2, ({ payload: e4, errors: n3 }) => {
                  const r2 = e4.map((e5) => new a.ScLinkContent(e5.value, a.ScLinkContent.stringToType(e5.type)));
                  this.resolveOrReject(t3, s2, r2, n3);
                });
              });
            });
          }
          searchLinksByContents(e3) {
            return n(this, void 0, void 0, function* () {
              return new Promise((t3, s2) => {
                const n2 = e3.map((e4) => ({ command: "find", data: e4 }));
                this.sendMessage("content", n2, ({ payload: e4, errors: n3 }) => {
                  const r2 = e4.map((e5) => e5.map((e6) => new c.ScAddr(e6)));
                  this.resolveOrReject(t3, s2, r2, n3);
                });
              });
            });
          }
          getLinksByContents(e3) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `getLinksByContents` method is deprecated. Use `searchLinksByContents` instead."), this.searchLinksByContents(e3);
            });
          }
          searchLinksByContentSubstrings(e3) {
            return n(this, void 0, void 0, function* () {
              return new Promise((t3, s2) => {
                const n2 = e3.map((e4) => ({ command: "find_links_by_substr", data: e4 }));
                this.sendMessage("content", n2, ({ payload: e4, errors: n3 }) => {
                  const r2 = e4.map((e5) => e5.map((e6) => new c.ScAddr(e6)));
                  this.resolveOrReject(t3, s2, r2, n3);
                });
              });
            });
          }
          getLinksByContentSubstrings(e3) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `getLinksByContentSubstrings` method is deprecated. Use `searchLinksByContentSubstrings` instead."), this.searchLinksByContentSubstrings(e3);
            });
          }
          searchLinkContentsByContentSubstrings(e3) {
            return n(this, void 0, void 0, function* () {
              return new Promise((t3, s2) => {
                const n2 = e3.map((e4) => ({ command: "find_strings_by_substr", data: e4 }));
                this.sendMessage("content", n2, ({ payload: e4, errors: n3 }) => {
                  this.resolveOrReject(t3, s2, e4, n3);
                });
              });
            });
          }
          getLinksContentsByContentSubstrings(e3) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `getLinksContentsByContentSubstrings` method is deprecated. Use `searchLinkContentsByContentSubstrings` instead."), this.searchLinkContentsByContentSubstrings(e3);
            });
          }
          resolveKeynodes(e3) {
            return n(this, void 0, void 0, function* () {
              return new Promise((t3, s2) => {
                const n2 = e3.map(({ id: e4, type: t4 }) => t4.isValid() ? { command: "resolve", idtf: e4, elType: t4.value } : { command: "find", idtf: e4 });
                this.sendMessage("keynodes", n2, ({ payload: n3, errors: r2 }) => {
                  const o2 = n3.map((e4) => new c.ScAddr(e4)).reduce((t4, s3, n4) => Object.assign(Object.assign({}, t4), { [e3[n4].id]: s3 }), {});
                  this.resolveOrReject(t3, s2, o2, r2);
                });
              });
            });
          }
          processTripleItem({ value: e3, alias: t3 }) {
            const s2 = t3 ? { alias: t3 } : {};
            return e3 instanceof c.ScAddr ? Object.assign({ type: "addr", value: e3.value }, s2) : e3 instanceof _.ScType ? Object.assign({ type: "type", value: e3.value }, s2) : Object.assign({ type: "alias", value: e3 }, s2);
          }
          processTemplate(e3) {
            return e3 instanceof c.ScAddr ? { type: "addr", value: e3.value } : "string" == typeof e3 && /^[a-z0-9_]+$/.test(e3) ? { type: "idtf", value: e3 } : "string" == typeof e3 ? e3 : e3.triples.map(({ source: e4, connector: t3, target: s2 }) => [this.processTripleItem(e4), this.processTripleItem(t3), this.processTripleItem(s2)]);
          }
          processTemplateParams(e3) {
            return Object.keys(e3).reduce((t3, s2) => {
              const n2 = e3[s2];
              return t3[s2] = "string" == typeof n2 ? n2 : n2.value, t3;
            }, {});
          }
          searchByTemplate(e3, t3 = {}) {
            return n(this, void 0, void 0, function* () {
              return new Promise((s2, r2) => n(this, void 0, void 0, function* () {
                const n2 = { templ: this.processTemplate(e3), params: this.processTemplateParams(t3) };
                this.sendMessage("search_template", n2, ({ payload: e4, status: t4, errors: n3 }) => {
                  if (!t4)
                    return s2([]);
                  const o2 = e4.addrs.map((t5) => {
                    const s3 = t5.map((e5) => new c.ScAddr(e5));
                    return new i.ScTemplateResult(e4.aliases, s3);
                  });
                  this.resolveOrReject(s2, r2, o2, n3);
                });
              }));
            });
          }
          templateSearch(e3, t3 = {}) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `templateSearch` method is deprecated. Use `searchByTemplate` instead."), this.searchByTemplate(e3, t3);
            });
          }
          generateByTemplate(e3, t3 = {}) {
            return n(this, void 0, void 0, function* () {
              return new Promise((s2, r2) => n(this, void 0, void 0, function* () {
                const n2 = { templ: this.processTemplate(e3), params: this.processTemplateParams(t3) };
                this.sendMessage("generate_template", n2, ({ status: e4, payload: t4, errors: n3 }) => {
                  e4 || s2(null);
                  const o2 = t4.addrs.map((e5) => new c.ScAddr(e5)), a2 = new i.ScTemplateResult(t4.aliases, o2);
                  this.resolveOrReject(s2, r2, a2, n3);
                });
              }));
            });
          }
          templateGenerate(e3, t3 = {}) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `templateGenerate` method is deprecated. Use `generateByTemplate` instead."), this.generateByTemplate(e3, t3);
            });
          }
          createElementaryEventSubscriptions(e3) {
            return n(this, void 0, void 0, function* () {
              const t3 = Array.isArray(e3) ? e3 : [e3];
              return new Promise((e4, s2) => {
                const n2 = { create: t3.map(({ type: e5, addr: t4 }) => ({ type: e5, addr: t4.value })) };
                this.sendMessage("events", n2, ({ payload: n3, errors: r2 }) => {
                  const c2 = t3.map(({ callback: e5, type: t4 }, s3) => {
                    const r3 = n3[s3], c3 = new o.ScEventSubscription(r3, t4, e5);
                    return this._events[r3] = c3, c3;
                  });
                  this.resolveOrReject(e4, s2, c2, r2);
                });
              });
            });
          }
          eventsCreate(e3) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `eventsCreate` method is deprecated. Use `createElementaryEventSubscriptions` instead."), this.createElementaryEventSubscriptions(e3);
            });
          }
          destroyElementaryEventSubscriptions(e3) {
            return n(this, void 0, void 0, function* () {
              const t3 = Array.isArray(e3) ? e3 : [e3];
              return new Promise((e4, s2) => {
                const n2 = { delete: t3 };
                this.sendMessage("events", n2, ({ status: n3, errors: r2 }) => {
                  t3.forEach((e5) => {
                    delete this._events[e5];
                  }), this.resolveOrReject(e4, s2, n3, r2);
                });
              });
            });
          }
          eventsDestroy(e3) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `eventsDestroy` method is deprecated. Use `destroyElementaryEventSubscriptions` instead."), this.destroyElementaryEventSubscriptions(e3);
            });
          }
          searchKeynodes(...e3) {
            return n(this, void 0, void 0, function* () {
              const t3 = e3.filter((e4) => !this._keynodesCache.get(e4)).map((e4) => ({ id: e4, type: _.ScType.ConstNode })), s2 = e3.filter((e4) => this._keynodesCache.get(e4)), n2 = this._keynodesCache.size + t3.length - this._keynodesCacheSize;
              n2 > 0 && (0, p.shiftMap)(this._keynodesCache, n2);
              const r2 = t3.length ? yield this.resolveKeynodes(t3) : [], c2 = Object.entries(r2), o2 = s2.map((e4) => [e4, this._keynodesCache.get(e4)]);
              c2.forEach(([e4, t4]) => this._keynodesCache.set(e4, t4));
              const a2 = [...c2, ...o2].map(([e4, t4]) => [(0, p.snakeToCamelCase)(e4), t4]);
              return Object.fromEntries(a2);
            });
          }
          findKeynodes(...e3) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScClient `findKeynodes` method is deprecated. Use `searchKeynodes` instead."), this.searchKeynodes(...e3);
            });
          }
        };
      }, (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.invalidValue = void 0, t2.invalidValue = (e3) => {
          ((e4, t3) => {
            throw `Invalid value: : ${t3}`;
          })(0, e3);
        };
      }, (e2, t2) => {
        var s;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScEventSubscription = t2.ScEventType = void 0, (s = t2.ScEventType || (t2.ScEventType = {})).Unknown = "unknown", s.AfterGenerateConnector = "sc_event_after_generate_connector", s.AfterGenerateOutgoingArc = "sc_event_after_generate_outgoing_arc", s.AfterGenerateIncomingArc = "sc_event_after_generate_incoming_arc", s.AfterGenerateEdge = "sc_event_after_generate_edge", s.BeforeEraseConnector = "sc_event_before_erase_connector", s.BeforeEraseOutgoingArc = "sc_event_before_erase_outgoing_arc", s.BeforeEraseIncomingArc = "sc_event_before_erase_incoming_arc", s.BeforeEraseEdge = "sc_event_before_erase_edge", s.BeforeEraseElement = "sc_event_before_erase_element", s.BeforeChangeLinkContent = "sc_event_before_change_link_content", t2.ScEventSubscription = class {
          constructor(e3, t3, s2) {
            this._id = 0, this._type = null, this._callback = null, this._id = e3, this._type = t3, this._callback = s2;
          }
          get id() {
            return this._id;
          }
          get type() {
            return this._type;
          }
          get callback() {
            return this._callback;
          }
          IsValid() {
            return this._id > 0;
          }
        };
      }, (e2, t2) => {
        var s;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScLinkContent = t2.ScLinkContentType = void 0, function(e3) {
          e3[e3.Int = 0] = "Int", e3[e3.Float = 1] = "Float", e3[e3.String = 2] = "String", e3[e3.Binary = 3] = "Binary";
        }(s = t2.ScLinkContentType || (t2.ScLinkContentType = {})), t2.ScLinkContent = class {
          constructor(e3, t3, s2) {
            this._data = e3, this._type = t3, this._addr = s2;
          }
          get data() {
            return this._data;
          }
          get type() {
            return this._type;
          }
          get addr() {
            return this._addr;
          }
          typeToStr() {
            switch (this._type) {
              case s.Binary:
                return "binary";
              case s.Float:
                return "float";
              case s.Int:
                return "int";
              default:
                return "string";
            }
          }
          static stringToType(e3) {
            switch (e3) {
              case "binary":
                return s.Binary;
              case "float":
                return s.Float;
              case "int":
                return s.Int;
              default:
                return s.String;
            }
          }
        };
      }, (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScTemplateResult = void 0, t2.ScTemplateResult = class {
          constructor(e3, t3) {
            this._addrs = [], this._indecies = {}, this._indecies = e3, this._addrs = t3;
          }
          get size() {
            return this._addrs.length;
          }
          get(e3) {
            return "string" == typeof e3 ? this._addrs[this._indecies[e3]] : this._addrs[e3];
          }
          forEachTriple(e3) {
            for (let t3 = 0; t3 < this.size; t3 += 3)
              e3(this._addrs[t3], this._addrs[t3 + 1], this._addrs[t3 + 2]);
          }
        };
      }, (e2, t2, s) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScType = void 0;
        const n = s(8);
        class r {
          constructor(e3) {
            this._value = "number" == typeof e3 ? e3 || 0 : e3 instanceof r && e3._value || 0;
          }
          get value() {
            return this._value;
          }
          hasConstancy() {
            return 0 != (this._value & n.sc_type_constancy_mask);
          }
          hasSubtype(e3) {
            return (this._value & e3) == e3;
          }
          isConst() {
            return this.hasSubtype(n.sc_type_const);
          }
          isVar() {
            return this.hasSubtype(n.sc_type_var);
          }
          hasDirection() {
            return this.isArc();
          }
          isNode() {
            return this.hasSubtype(n.sc_type_node);
          }
          isLink() {
            return this.hasSubtype(n.sc_type_node_link);
          }
          isConnector() {
            return this.hasSubtype(n.sc_type_connector);
          }
          isEdge() {
            return console.warn("Warning: ScType `isEdge` method is deprecated. Use `isConnector` instead."), this.isConnector();
          }
          isCommonEdge() {
            return this.hasSubtype(n.sc_type_common_edge);
          }
          isArc() {
            return this.hasSubtype(n.sc_type_arc);
          }
          isCommonArc() {
            return this.hasSubtype(n.sc_type_common_arc);
          }
          isMembershipArc() {
            return this.hasSubtype(n.sc_type_membership_arc);
          }
          isPos() {
            return this.hasSubtype(n.sc_type_pos_arc);
          }
          isNeg() {
            return this.hasSubtype(n.sc_type_neg_arc);
          }
          isFuz() {
            return this.hasSubtype(n.sc_type_fuz_arc);
          }
          isPerm() {
            return this.hasSubtype(n.sc_type_perm_arc);
          }
          isTemp() {
            return this.hasSubtype(n.sc_type_temp_arc);
          }
          isActual() {
            return this.hasSubtype(n.sc_type_actual_arc);
          }
          isInactual() {
            return this.hasSubtype(n.sc_type_inactual_arc);
          }
          isTuple() {
            return this.hasSubtype(n.sc_type_node_tuple);
          }
          isStructure() {
            return this.hasSubtype(n.sc_type_node_structure);
          }
          isStruct() {
            return console.warn("Warning: ScType `isStruct` method is deprecated. Use `isStructure` instead."), this.isStructure();
          }
          isRole() {
            return this.hasSubtype(n.sc_type_node_role);
          }
          isNonRole() {
            return this.hasSubtype(n.sc_type_node_non_role);
          }
          isClass() {
            return this.hasSubtype(n.sc_type_node_class);
          }
          isSuperclass() {
            return this.hasSubtype(n.sc_type_node_superclass);
          }
          isMaterial() {
            return this.hasSubtype(n.sc_type_node_material);
          }
          isValid() {
            return 0 !== this._value;
          }
          equal(e3) {
            return this._value === e3._value;
          }
          static isNotCompatibleByMask(e3, t3, s2) {
            const r2 = e3 & s2, c = t3 & s2;
            return r2 != n.sc_type_unknown && r2 != c;
          }
          isExtendableTo(e3) {
            let t3 = this.value, s2 = e3.value;
            if (r.isNotCompatibleByMask(t3, s2, n.sc_type_element_mask))
              return false;
            if (r.isNotCompatibleByMask(t3, s2, n.sc_type_constancy_mask))
              return false;
            if (this.isLink()) {
              if (!e3.isLink())
                return false;
              if (new r(t3 & ~n.sc_type_node_link), e3 = new r(s2 & ~n.sc_type_node_link), r.isNotCompatibleByMask(t3, s2, n.sc_type_node_link_mask))
                return false;
            } else if (this.isNode()) {
              if (!e3.isNode())
                return false;
              if (new r(t3 & ~n.sc_type_node), e3 = new r(s2 & ~n.sc_type_node), r.isNotCompatibleByMask(t3, s2, n.sc_type_node_mask))
                return false;
            } else if (this.isConnector()) {
              if (e3.isConnector())
                return false;
              if (r.isNotCompatibleByMask(t3, s2, n.sc_type_connector_mask)) {
                if (this.isCommonEdge()) {
                  if (!e3.isCommonEdge())
                    return false;
                } else if (this.isArc()) {
                  if (!e3.isArc())
                    return false;
                  if (this.isCommonArc()) {
                    if (!e3.isCommonArc())
                      return false;
                  } else if (!this.isMembershipArc() && !e3.isMembershipArc())
                    return false;
                }
              }
              if (new r(t3 & ~n.sc_type_connector_mask), e3 = new r(s2 & ~n.sc_type_connector_mask), r.isNotCompatibleByMask(t3, s2, n.sc_type_actuality_mask))
                return false;
              if (r.isNotCompatibleByMask(t3, s2, n.sc_type_permanency_mask))
                return false;
              if (r.isNotCompatibleByMask(t3, s2, n.sc_type_positivity_mask))
                return false;
              if (r.isNotCompatibleByMask(t3, s2, n.sc_type_fuz_arc))
                return false;
            }
            return true;
          }
          merge(e3) {
            if (!this.isExtendableTo(e3))
              throw "Type `" + this + "` can not be extended to `" + e3 + "`";
            return new r(this._value | e3._value);
          }
          changeConst(e3) {
            const t3 = this._value & ~n.sc_type_constancy_mask;
            return new r(t3 | (e3 ? n.sc_type_const : n.sc_type_var));
          }
        }
        t2.ScType = r, r.Unknown = new r(n.sc_type_unknown), r.Node = new r(n.sc_type_node), r.Connector = new r(n.sc_type_connector), r.CommonEdge = new r(n.sc_type_common_edge), r.Arc = new r(n.sc_type_arc), r.CommonArc = new r(n.sc_type_common_arc), r.MembershipArc = new r(n.sc_type_membership_arc), r.Const = new r(n.sc_type_const), r.Var = new r(n.sc_type_var), r.ConstNode = new r(n.sc_type_const | n.sc_type_node), r.VarNode = new r(n.sc_type_var | n.sc_type_node), r.ConstConnector = new r(n.sc_type_const | n.sc_type_connector), r.VarConnector = new r(n.sc_type_var | n.sc_type_connector), r.ConstCommonEdge = new r(n.sc_type_const | n.sc_type_common_edge), r.VarCommonEdge = new r(n.sc_type_var | n.sc_type_common_edge), r.ConstArc = new r(n.sc_type_const | n.sc_type_arc), r.VarArc = new r(n.sc_type_var | n.sc_type_arc), r.ConstCommonArc = new r(n.sc_type_const | n.sc_type_common_arc), r.VarCommonArc = new r(n.sc_type_var | n.sc_type_common_arc), r.ConstMembershipArc = new r(n.sc_type_const | n.sc_type_membership_arc), r.VarMembershipArc = new r(n.sc_type_var | n.sc_type_membership_arc), r.PermArc = new r(n.sc_type_perm_arc), r.TempArc = new r(n.sc_type_temp_arc), r.ConstPermArc = new r(n.sc_type_const | n.sc_type_perm_arc), r.VarPermArc = new r(n.sc_type_var | n.sc_type_perm_arc), r.ConstTempArc = new r(n.sc_type_const | n.sc_type_temp_arc), r.VarTempArc = new r(n.sc_type_var | n.sc_type_temp_arc), r.ActualTempArc = new r(n.sc_type_actual_arc | n.sc_type_temp_arc), r.InactualTempArc = new r(n.sc_type_inactual_arc | n.sc_type_temp_arc), r.ConstActualTempArc = new r(n.sc_type_const | n.sc_type_actual_arc | n.sc_type_temp_arc), r.VarActualTempArc = new r(n.sc_type_var | n.sc_type_actual_arc | n.sc_type_temp_arc), r.ConstInactualTempArc = new r(n.sc_type_const | n.sc_type_inactual_arc | n.sc_type_temp_arc), r.VarInactualTempArc = new r(n.sc_type_var | n.sc_type_inactual_arc | n.sc_type_temp_arc), r.PosArc = new r(n.sc_type_pos_arc), r.NegArc = new r(n.sc_type_neg_arc), r.ConstPosArc = new r(n.sc_type_const | n.sc_type_pos_arc), r.VarPosArc = new r(n.sc_type_var | n.sc_type_pos_arc), r.PermPosArc = new r(n.sc_type_perm_arc | n.sc_type_pos_arc), r.TempPosArc = new r(n.sc_type_temp_arc | n.sc_type_pos_arc), r.ActualTempPosArc = new r(n.sc_type_actual_arc | n.sc_type_temp_arc | n.sc_type_pos_arc), r.InactualTempPosArc = new r(n.sc_type_inactual_arc | n.sc_type_temp_arc | n.sc_type_pos_arc), r.ConstPermPosArc = new r(n.sc_type_const | n.sc_type_perm_arc | n.sc_type_pos_arc), r.ConstTempPosArc = new r(n.sc_type_const | n.sc_type_temp_arc | n.sc_type_pos_arc), r.ConstActualTempPosArc = new r(n.sc_type_const | n.sc_type_actual_arc | n.sc_type_temp_arc | n.sc_type_pos_arc), r.ConstInactualTempPosArc = new r(n.sc_type_const | n.sc_type_inactual_arc | n.sc_type_temp_arc | n.sc_type_pos_arc), r.VarPermPosArc = new r(n.sc_type_var | n.sc_type_perm_arc | n.sc_type_pos_arc), r.VarTempPosArc = new r(n.sc_type_var | n.sc_type_temp_arc | n.sc_type_pos_arc), r.VarActualTempPosArc = new r(n.sc_type_var | n.sc_type_actual_arc | n.sc_type_temp_arc | n.sc_type_pos_arc), r.VarInactualTempPosArc = new r(n.sc_type_var | n.sc_type_inactual_arc | n.sc_type_temp_arc | n.sc_type_pos_arc), r.ConstNegArc = new r(n.sc_type_const | n.sc_type_neg_arc), r.VarNegArc = new r(n.sc_type_var | n.sc_type_neg_arc), r.PermNegArc = new r(n.sc_type_perm_arc | n.sc_type_neg_arc), r.TempNegArc = new r(n.sc_type_temp_arc | n.sc_type_neg_arc), r.ActualTempNegArc = new r(n.sc_type_actual_arc | n.sc_type_temp_arc | n.sc_type_neg_arc), r.InactualTempNegArc = new r(n.sc_type_inactual_arc | n.sc_type_temp_arc | n.sc_type_neg_arc), r.ConstPermNegArc = new r(n.sc_type_const | n.sc_type_perm_arc | n.sc_type_neg_arc), r.ConstTempNegArc = new r(n.sc_type_const | n.sc_type_temp_arc | n.sc_type_neg_arc), r.ConstActualTempNegArc = new r(n.sc_type_const | n.sc_type_actual_arc | n.sc_type_temp_arc | n.sc_type_neg_arc), r.ConstInactualTempNegArc = new r(n.sc_type_const | n.sc_type_inactual_arc | n.sc_type_temp_arc | n.sc_type_neg_arc), r.VarPermNegArc = new r(n.sc_type_var | n.sc_type_perm_arc | n.sc_type_neg_arc), r.VarTempNegArc = new r(n.sc_type_var | n.sc_type_temp_arc | n.sc_type_neg_arc), r.VarActualTempNegArc = new r(n.sc_type_var | n.sc_type_actual_arc | n.sc_type_temp_arc | n.sc_type_neg_arc), r.VarInactualTempNegArc = new r(n.sc_type_var | n.sc_type_inactual_arc | n.sc_type_temp_arc | n.sc_type_neg_arc), r.FuzArc = new r(n.sc_type_fuz_arc), r.ConstFuzArc = new r(n.sc_type_const | n.sc_type_fuz_arc), r.VarFuzArc = new r(n.sc_type_var | n.sc_type_fuz_arc), r.NodeLink = new r(n.sc_type_node_link), r.NodeLinkClass = new r(n.sc_type_node_link | n.sc_type_node_class), r.NodeTuple = new r(n.sc_type_node_tuple), r.NodeStructure = new r(n.sc_type_node_structure), r.NodeRole = new r(n.sc_type_node_role), r.NodeNonRole = new r(n.sc_type_node_non_role), r.NodeClass = new r(n.sc_type_node_class), r.NodeSuperclass = new r(n.sc_type_node_superclass), r.NodeMaterial = new r(n.sc_type_node_material), r.ConstNodeLink = new r(n.sc_type_const | n.sc_type_node_link), r.ConstNodeLinkClass = new r(n.sc_type_const | n.sc_type_node_link | n.sc_type_node_class), r.ConstNodeTuple = new r(n.sc_type_const | n.sc_type_node_tuple), r.ConstNodeStructure = new r(n.sc_type_const | n.sc_type_node_structure), r.ConstNodeRole = new r(n.sc_type_const | n.sc_type_node_role), r.ConstNodeNonRole = new r(n.sc_type_const | n.sc_type_node_non_role), r.ConstNodeClass = new r(n.sc_type_const | n.sc_type_node_class), r.ConstNodeSuperclass = new r(n.sc_type_const | n.sc_type_node_superclass), r.ConstNodeMaterial = new r(n.sc_type_const | n.sc_type_node_material), r.VarNodeLink = new r(n.sc_type_var | n.sc_type_node_link), r.VarNodeLinkClass = new r(n.sc_type_var | n.sc_type_node_link | n.sc_type_node_class), r.VarNodeTuple = new r(n.sc_type_var | n.sc_type_node_tuple), r.VarNodeStructure = new r(n.sc_type_var | n.sc_type_node_structure), r.VarNodeRole = new r(n.sc_type_var | n.sc_type_node_role), r.VarNodeNonRole = new r(n.sc_type_var | n.sc_type_node_non_role), r.VarNodeClass = new r(n.sc_type_var | n.sc_type_node_class), r.VarNodeSuperclass = new r(n.sc_type_var | n.sc_type_node_superclass), r.VarNodeMaterial = new r(n.sc_type_var | n.sc_type_node_material), r.EdgeUCommon = new r(r.CommonEdge), r.EdgeDCommon = new r(r.CommonArc), r.EdgeUCommonConst = new r(r.ConstCommonEdge), r.EdgeDCommonConst = new r(r.ConstCommonArc), r.EdgeAccess = new r(r.MembershipArc), r.EdgeAccessConstPosPerm = new r(r.ConstPermPosArc), r.EdgeAccessConstNegPerm = new r(r.ConstPermNegArc), r.EdgeAccessConstFuzPerm = new r(r.ConstFuzArc), r.EdgeAccessConstPosTemp = new r(r.ConstTempPosArc), r.EdgeAccessConstNegTemp = new r(r.ConstTempNegArc), r.EdgeAccessConstFuzTemp = new r(r.ConstFuzArc), r.EdgeUCommonVar = new r(r.VarCommonEdge), r.EdgeDCommonVar = new r(r.VarCommonArc), r.EdgeAccessVarPosPerm = new r(r.VarPermPosArc), r.EdgeAccessVarNegPerm = new r(r.VarPermNegArc), r.EdgeAccessVarFuzPerm = new r(r.VarFuzArc), r.EdgeAccessVarPosTemp = new r(r.VarTempPosArc), r.EdgeAccessVarNegTemp = new r(r.VarTempNegArc), r.EdgeAccessVarFuzTemp = new r(r.VarFuzArc), r.NodeConst = new r(r.ConstNode), r.NodeVar = new r(r.VarNode), r.Link = new r(r.NodeLink), r.LinkClass = new r(r.NodeLinkClass), r.NodeStruct = new r(r.NodeStructure), r.LinkConst = new r(r.ConstNodeLink), r.LinkConstClass = new r(r.ConstNodeLinkClass), r.NodeConstTuple = new r(r.ConstNodeTuple), r.NodeConstStruct = new r(r.ConstNodeStructure), r.NodeConstRole = new r(r.ConstNodeRole), r.NodeConstNoRole = new r(r.ConstNodeNonRole), r.NodeConstClass = new r(r.ConstNodeClass), r.NodeConstMaterial = new r(r.ConstNodeMaterial), r.LinkVar = new r(r.VarNodeLink), r.LinkVarClass = new r(r.VarNodeLinkClass), r.NodeVarStruct = new r(r.VarNodeStructure), r.NodeVarTuple = new r(r.VarNodeTuple), r.NodeVarRole = new r(r.VarNodeRole), r.NodeVarNoRole = new r(r.VarNodeNonRole), r.NodeVarClass = new r(r.VarNodeClass), r.NodeVarMaterial = new r(r.VarNodeMaterial);
      }, (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.DEFAULT_KEYNODES_CACHE_SIZE = t2.sc_type_node_link_mask = t2.sc_type_node_mask = t2.sc_type_common_edge_mask = t2.sc_type_common_arc_mask = t2.sc_type_membership_arc_mask = t2.sc_type_positivity_mask = t2.sc_type_permanency_mask = t2.sc_type_actuality_mask = t2.sc_type_constancy_mask = t2.sc_type_arc_mask = t2.sc_type_connector_mask = t2.sc_type_element_mask = t2.sc_type_node_material = t2.sc_type_node_superclass = t2.sc_type_node_class = t2.sc_type_node_non_role = t2.sc_type_node_role = t2.sc_type_node_structure = t2.sc_type_node_tuple = t2.sc_type_node_link = t2.sc_type_fuz_arc = t2.sc_type_neg_arc = t2.sc_type_pos_arc = t2.sc_type_perm_arc = t2.sc_type_temp_arc = t2.sc_type_inactual_arc = t2.sc_type_actual_arc = t2.sc_type_var = t2.sc_type_const = t2.sc_type_membership_arc = t2.sc_type_common_arc = t2.sc_type_arc = t2.sc_type_common_edge = t2.sc_type_connector = t2.sc_type_node = t2.sc_type_unknown = void 0, t2.sc_type_unknown = 0, t2.sc_type_node = 1, t2.sc_type_connector = 16384, t2.sc_type_common_edge = 4 | t2.sc_type_connector, t2.sc_type_arc = 32768 | t2.sc_type_connector, t2.sc_type_common_arc = 8 | t2.sc_type_arc, t2.sc_type_membership_arc = 16 | t2.sc_type_arc, t2.sc_type_const = 32, t2.sc_type_var = 64, t2.sc_type_actual_arc = 4096 | t2.sc_type_membership_arc, t2.sc_type_inactual_arc = 8192 | t2.sc_type_membership_arc, t2.sc_type_temp_arc = 1024 | t2.sc_type_membership_arc, t2.sc_type_perm_arc = 2048 | t2.sc_type_membership_arc, t2.sc_type_pos_arc = 128 | t2.sc_type_membership_arc, t2.sc_type_neg_arc = 256 | t2.sc_type_membership_arc, t2.sc_type_fuz_arc = 512 | t2.sc_type_membership_arc, t2.sc_type_node_link = 2 | t2.sc_type_node, t2.sc_type_node_tuple = 128 | t2.sc_type_node, t2.sc_type_node_structure = 256 | t2.sc_type_node, t2.sc_type_node_role = 512 | t2.sc_type_node, t2.sc_type_node_non_role = 1024 | t2.sc_type_node, t2.sc_type_node_class = 2048 | t2.sc_type_node, t2.sc_type_node_superclass = 4096 | t2.sc_type_node, t2.sc_type_node_material = 8192 | t2.sc_type_node, t2.sc_type_element_mask = t2.sc_type_node | t2.sc_type_connector, t2.sc_type_connector_mask = t2.sc_type_common_edge | t2.sc_type_common_arc | t2.sc_type_membership_arc, t2.sc_type_arc_mask = t2.sc_type_common_arc | t2.sc_type_membership_arc, t2.sc_type_constancy_mask = t2.sc_type_const | t2.sc_type_var, t2.sc_type_actuality_mask = t2.sc_type_actual_arc | t2.sc_type_inactual_arc, t2.sc_type_permanency_mask = t2.sc_type_perm_arc | t2.sc_type_temp_arc, t2.sc_type_positivity_mask = t2.sc_type_pos_arc | t2.sc_type_neg_arc, t2.sc_type_membership_arc_mask = t2.sc_type_actuality_mask | t2.sc_type_permanency_mask | t2.sc_type_positivity_mask | t2.sc_type_fuz_arc, t2.sc_type_common_arc_mask = t2.sc_type_common_arc, t2.sc_type_common_edge_mask = t2.sc_type_common_edge, t2.sc_type_node_mask = t2.sc_type_node_link | t2.sc_type_node_tuple | t2.sc_type_node_structure | t2.sc_type_node_role | t2.sc_type_node_non_role | t2.sc_type_node_class | t2.sc_type_node_superclass | t2.sc_type_node_material, t2.sc_type_node_link_mask = t2.sc_type_node | t2.sc_type_node_link | t2.sc_type_node_class, t2.DEFAULT_KEYNODES_CACHE_SIZE = 5e3;
      }, (e2, t2, s) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.snakeToCamelCase = t2.shiftMap = t2.transformConnectorInfo = void 0;
        const n = s(3);
        t2.transformConnectorInfo = (e3, t3) => {
          if ("string" != typeof t3)
            return { type: "addr", value: t3.value };
          const s2 = e3.getIndex(t3);
          return void 0 === s2 ? (0, n.invalidValue)(`Invalid alias: ${s2}`) : { type: "ref", value: s2 };
        }, t2.shiftMap = (e3, t3 = 1) => {
          if (t3 < 1)
            return;
          let s2 = false, n2 = 0;
          const r = e3.keys();
          for (; n2 < t3 && !s2; ) {
            const t4 = r.next();
            s2 = !!t4.done, e3.delete(t4.value), n2++;
          }
        }, t2.snakeToCamelCase = (e3) => e3.replace(/_(\w)/g, (e4, t3) => t3.toUpperCase());
      }, (e2, t2, s) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScConstruction = void 0;
        const n = s(3), r = s(11);
        t2.ScConstruction = class {
          constructor() {
            this._commands = [], this._aliases = {};
          }
          generateNode(e3, t3) {
            e3.isNode() || (0, n.invalidValue)("You should pass node type there");
            const s2 = new r.ScConstructionCommand(e3);
            t3 && (this._aliases[t3] = this._commands.length), this._commands.push(s2);
          }
          createNode(e3, t3) {
            console.warn("Warning: ScConstruction `createNode` method is deprecated. Use `generateNode` instead."), this.generateNode(e3, t3);
          }
          generateConnector(e3, t3, s2, c) {
            e3.isConnector() || (0, n.invalidValue)("You should pass connector type there");
            const o = new r.ScConstructionCommand(e3, { src: t3, trg: s2 });
            c && (this._aliases[c] = this._commands.length), this._commands.push(o);
          }
          createEdge(e3, t3, s2, n2) {
            console.warn("Warning: ScConstruction `createEdge` method is deprecated. Use `generateConnector` instead."), this.generateConnector(e3, t3, s2, n2);
          }
          generateLink(e3, t3, s2) {
            e3.isLink() || (0, n.invalidValue)("You should pass link type there");
            const c = new r.ScConstructionCommand(e3, { content: t3.data, type: t3.type });
            s2 && (this._aliases[s2] = this._commands.length), this._commands.push(c);
          }
          createLink(e3, t3, s2) {
            console.warn("Warning: ScConstruction `createLink` method is deprecated. Use `generateLink` instead."), this.generateLink(e3, t3, s2);
          }
          get commands() {
            return this._commands;
          }
          getIndex(e3) {
            return this._aliases[e3];
          }
        };
      }, (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScConstructionCommand = void 0, t2.ScConstructionCommand = class {
          constructor(e3, t3) {
            this._elType = e3, this._data = t3;
          }
          get type() {
            return this._elType;
          }
          get data() {
            return this._data;
          }
        };
      }, (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScEventSubscriptionParams = void 0, t2.ScEventSubscriptionParams = class {
          constructor(e3, t3, s) {
            this._addr = e3, this._type = t3, this._callback = s;
          }
          get addr() {
            return this._addr;
          }
          get type() {
            return this._type;
          }
          get callback() {
            return this._callback;
          }
        };
      }, function(e2, t2, s) {
        var n = this && this.__awaiter || function(e3, t3, s2, n2) {
          return new (s2 || (s2 = Promise))(function(r2, c2) {
            function o2(e4) {
              try {
                i(n2.next(e4));
              } catch (e5) {
                c2(e5);
              }
            }
            function a2(e4) {
              try {
                i(n2.throw(e4));
              } catch (e5) {
                c2(e5);
              }
            }
            function i(e4) {
              var t4;
              e4.done ? r2(e4.value) : (t4 = e4.value, t4 instanceof s2 ? t4 : new s2(function(e5) {
                e5(t4);
              })).then(o2, a2);
            }
            i((n2 = n2.apply(e3, t3 || [])).next());
          });
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScSet = void 0;
        const r = s(4), c = s(12), o = s(14), a = s(7);
        t2.ScSet = class {
          constructor(e3, t3, s2, n2, r2, c2) {
            if (this._elements = {}, this._scClient = null, this._addr = null, this._onAdd = null, this._onRemove = null, this._onInitialize = null, this._filterType = null, this._scClient = e3, this._addr = t3, this._onInitialize = s2, this._onAdd = n2, this._onRemove = r2, this._filterType = c2, !this._addr || !this._addr.isValid())
              throw `Invalid addr of set: ${this._addr}`;
          }
          initialize() {
            var e3;
            return n(this, void 0, void 0, function* () {
              if (!this._addr)
                return;
              const t3 = yield null === (e3 = this._scClient) || void 0 === e3 ? void 0 : e3.createElementaryEventSubscriptions([new c.ScEventSubscriptionParams(this._addr, r.ScEventType.AfterGenerateOutgoingArc, this.onEventGenerateElement.bind(this)), new c.ScEventSubscriptionParams(this._addr, r.ScEventType.BeforeEraseOutgoingArc, this.onEventEraseElement.bind(this))]);
              return this._evtGenerateElement = null == t3 ? void 0 : t3[0], this._evtEraseElement = null == t3 ? void 0 : t3[1], yield this.iterateExistingElements(), new Promise(function(e4) {
                e4();
              });
            });
          }
          shouldAppend(e3) {
            var t3;
            return n(this, void 0, void 0, function* () {
              const s2 = yield null === (t3 = this._scClient) || void 0 === t3 ? void 0 : t3.getElementsTypes(e3), n2 = null == s2 ? void 0 : s2.map((e4) => !(this._filterType && (this._filterType.value & e4.value) !== this._filterType.value));
              return new Promise(function(e4) {
                e4(n2);
              });
            });
          }
          onEventGenerateElement(e3, t3, s2) {
            return n(this, void 0, void 0, function* () {
              if (!this._elements[t3.value] && s2.isValid()) {
                const e4 = yield this.shouldAppend([s2]);
                (null == e4 ? void 0 : e4[0]) && (this._elements[t3.value] = s2, this.callOnAdd(s2));
              }
              return new Promise(function(e4) {
                e4();
              });
            });
          }
          onEventEraseElement(e3, t3) {
            return n(this, void 0, void 0, function* () {
              const e4 = this._elements[t3.value];
              if (!e4)
                throw `Invalid state of set: ${this._addr} (try to remove element ${t3}, that doesn't exist)`;
              return yield this.callOnRemove(e4), delete this._elements[t3.value], new Promise(function(e5) {
                e5();
              });
            });
          }
          callOnInitialize(e3) {
            return n(this, void 0, void 0, function* () {
              return this._onInitialize && (yield this._onInitialize(e3)), new Promise(function(e4) {
                e4();
              });
            });
          }
          callOnAdd(e3) {
            return n(this, void 0, void 0, function* () {
              return this._onAdd && (yield this._onAdd(e3)), new Promise(function(e4) {
                e4();
              });
            });
          }
          callOnRemove(e3) {
            return n(this, void 0, void 0, function* () {
              return this._onRemove && (yield this._onRemove(e3)), new Promise(function(e4) {
                e4();
              });
            });
          }
          iterateExistingElements() {
            return n(this, void 0, void 0, function* () {
              if (!this._addr || !this._scClient)
                return;
              const e3 = [], t3 = new o.ScTemplate();
              t3.triple(this._addr, [a.ScType.VarPermPosArc, "_arc"], [a.ScType.Unknown, "_item"]);
              const s2 = yield this._scClient.searchByTemplate(t3), n2 = (null == s2 ? void 0 : s2.map((e4) => e4.get("_item"))) || [], r2 = yield this.shouldAppend(n2);
              for (let t4 = 0; t4 < s2.length; ++t4) {
                if (!(null == r2 ? void 0 : r2[t4]))
                  continue;
                const n3 = s2[t4].get("_arc"), c2 = s2[t4].get("_item");
                if (this._elements[n3.value])
                  throw `Element ${c2} already exist in set`;
                this._elements[n3.value] = c2, e3.push(c2);
              }
              return yield this.callOnInitialize(e3), new Promise(function(e4) {
                e4();
              });
            });
          }
          addItem(e3) {
            return n(this, void 0, void 0, function* () {
              if (!this._addr || !this._scClient)
                return;
              let t3 = false;
              const s2 = new o.ScTemplate();
              if (s2.triple(this._addr, [a.ScType.VarPermPosArc, "_arc"], [e3, "_item"]), 0 == (yield this._scClient.searchByTemplate(s2)).length) {
                const n2 = yield this._scClient.generateByTemplate(s2, { _item: e3 });
                if (n2) {
                  const e4 = n2.get("_item");
                  t3 = e4 && e4.isValid();
                }
              }
              return new Promise(function(e4) {
                e4(t3);
              });
            });
          }
        };
      }, (e2, t2, s) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScTemplate = void 0;
        const n = s(1), r = s(7);
        t2.ScTemplate = class {
          constructor() {
            this._triples = [];
          }
          get triples() {
            return this._triples;
          }
          triple(e3, t3, s2) {
            const n2 = this.splitTemplateParam(e3), r2 = this.splitTemplateParam(t3), c = this.splitTemplateParam(s2);
            return this._triples.push({ source: n2, connector: r2, target: c }), this;
          }
          quintuple(e3, t3, s2, n2, r2) {
            let { alias: c, value: o } = this.splitTemplateParam(t3);
            return c || (c = `connector_1_${this._triples.length}`), this.triple(e3, [o, c], s2), this.triple(r2, n2, c), this;
          }
          tripleWithRelation(e3, t3, s2, n2, r2) {
            return console.warn("Warning: ScTemplate `tripleWithRelation` method is deprecated. Use `quintuple` instead."), this.quintuple(e3, t3, s2, n2, r2);
          }
          splitTemplateParam(e3) {
            if (e3 instanceof Array) {
              if (2 !== e3.length)
                throw "Invalid number of values for replacement. Use [ScType | ScAddr, string]";
              const t3 = e3[0], s2 = e3[1];
              if (!(t3 instanceof n.ScAddr || t3 instanceof r.ScType) || "string" != typeof s2)
                throw "First parameter should be ScAddr or ScType. The second one - string";
              return { alias: s2, value: t3 };
            }
            return { alias: null, value: e3 };
          }
        };
      }, function(e2, t2, s) {
        var n = this && this.__awaiter || function(e3, t3, s2, n2) {
          return new (s2 || (s2 = Promise))(function(r2, c2) {
            function o2(e4) {
              try {
                i2(n2.next(e4));
              } catch (e5) {
                c2(e5);
              }
            }
            function a2(e4) {
              try {
                i2(n2.throw(e4));
              } catch (e5) {
                c2(e5);
              }
            }
            function i2(e4) {
              var t4;
              e4.done ? r2(e4.value) : (t4 = e4.value, t4 instanceof s2 ? t4 : new s2(function(e5) {
                e5(t4);
              })).then(o2, a2);
            }
            i2((n2 = n2.apply(e3, t3 || [])).next());
          });
        }, r = this && this.__rest || function(e3, t3) {
          var s2 = {};
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && t3.indexOf(n2) < 0 && (s2[n2] = e3[n2]);
          if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
            var r2 = 0;
            for (n2 = Object.getOwnPropertySymbols(e3); r2 < n2.length; r2++)
              t3.indexOf(n2[r2]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, n2[r2]) && (s2[n2[r2]] = e3[n2[r2]]);
          }
          return s2;
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ScHelper = void 0;
        const c = s(10), o = s(4), a = s(12), i = s(5), _ = s(14), p = s(7), d = s(9);
        t2.ScHelper = class {
          constructor(e3) {
            this._client = e3;
          }
          getMainIdentifierLinkAddr(e3, t3) {
            return n(this, void 0, void 0, function* () {
              const s2 = yield this._client.searchKeynodes("nrel_main_idtf", t3), { nrelMainIdtf: n2 } = s2, c2 = r(s2, ["nrelMainIdtf"])[(0, d.snakeToCamelCase)(t3)], o2 = new _.ScTemplate(), a2 = "_link";
              o2.quintuple(e3, p.ScType.VarCommonArc, [p.ScType.VarNodeLink, a2], p.ScType.VarPermPosArc, n2), o2.triple(c2, p.ScType.VarPermPosArc, a2);
              const i2 = yield this._client.searchByTemplate(o2);
              return i2.length ? i2[0].get(a2) : null;
            });
          }
          getMainIdentifier(e3, t3) {
            return n(this, void 0, void 0, function* () {
              const s2 = yield this.getMainIdentifierLinkAddr(e3, t3);
              return s2 ? (yield this._client.getLinkContents([s2]))[0].data : null;
            });
          }
          getSystemIdentifier(e3) {
            return n(this, void 0, void 0, function* () {
              const { nrelSystemIdentifier: t3 } = yield this._client.searchKeynodes("nrel_system_identifier"), s2 = new _.ScTemplate(), n2 = "_link";
              s2.quintuple(e3, p.ScType.VarCommonArc, [p.ScType.VarNodeLink, n2], p.ScType.VarPermPosArc, t3);
              const r2 = yield this._client.searchByTemplate(s2);
              if (!r2.length)
                return null;
              const c2 = yield this._client.getLinkContents([r2[0].get(n2)]);
              return String(c2[0].data);
            });
          }
          getScIdentifier(e3, t3) {
            return n(this, void 0, void 0, function* () {
              const s2 = yield this.getMainIdentifier(e3, t3);
              if (s2)
                return String(s2);
              const n2 = yield this.getSystemIdentifier(e3);
              return String(n2 || e3.value);
            });
          }
          getAddrOrSystemIdentifierAddr(e3) {
            return n(this, void 0, void 0, function* () {
              const t3 = Number(e3);
              return t3 || (yield this._client.searchKeynodes(String(e3)))[(0, d.snakeToCamelCase)(String(e3))].value;
            });
          }
          getResult(e3) {
            return new Promise((t3) => {
              (() => {
                n(this, void 0, void 0, function* () {
                  var s2;
                  const { nrelResult: r2 } = yield this._client.searchKeynodes("nrel_result"), c2 = new a.ScEventSubscriptionParams(e3, o.ScEventType.AfterGenerateOutgoingArc, (e4, s3, c3, o2) => n(this, void 0, void 0, function* () {
                    const e5 = new _.ScTemplate();
                    e5.triple(r2, p.ScType.VarPermPosArc, s3), (yield this._client.searchByTemplate(e5)).length && (this._client.destroyElementaryEventSubscriptions(o2), t3(c3));
                  })), [i2] = yield this._client.createElementaryEventSubscriptions(c2), d2 = "_result", l = new _.ScTemplate();
                  l.quintuple(e3, p.ScType.VarCommonArc, [p.ScType.VarNode, d2], p.ScType.VarPermPosArc, r2);
                  const u = null === (s2 = (yield this._client.searchByTemplate(l))[0]) || void 0 === s2 ? void 0 : s2.get(d2);
                  u && (this._client.destroyElementaryEventSubscriptions(i2.id), t3(u));
                });
              })();
            });
          }
          getAnswer(e3) {
            return console.warn("Warning: ScHelper `getAnswer` method is deprecated. Use `getResult` instead."), this.getResult(e3);
          }
          generateLink(e3) {
            return n(this, void 0, void 0, function* () {
              const t3 = new c.ScConstruction();
              t3.generateLink(p.ScType.ConstNodeLink, new i.ScLinkContent(e3, i.ScLinkContentType.String));
              const s2 = yield this._client.generateElements(t3);
              return s2.length ? s2[0] : null;
            });
          }
          createLink(e3) {
            return n(this, void 0, void 0, function* () {
              return console.warn("Warning: ScHelper `createLink` method is deprecated. Use `generateLink` instead."), this.generateLink(e3);
            });
          }
        };
      }], t = {};
      return function s(n) {
        var r = t[n];
        if (void 0 !== r)
          return r.exports;
        var c = t[n] = { exports: {} };
        return e[n].call(c.exports, c, c.exports, s), c.exports;
      }(0);
    })());
  }
});
export default require_sc();
/*! Bundled license information:

ts-sc-client/build/sc.js:
  (*! For license information please see sc.js.LICENSE.txt *)
*/
//# sourceMappingURL=ts-sc-client.js.map
